<?php
require_once 'fleamarket_classes.php';

define('OLX_NAME', OlxMarket::getMarketName());
define('OLX_URL', OlxMarket::getBaseURL());
define('BESPLATKA_NAME', BesplatkaMarket::getMarketName());
define('BESPLATKA_URL', BesplatkaMarket::getBaseURL());
define('SKYLOTS_NAME', SkylotsMarket::getMarketName());
define('SKYLOTS_URL', SkylotsMarket::getBaseURL());

function sherlock_menu() {
    $items = array();
    $items['sherlock'] = array(
        'title' => 'Sherlock - Let\'s find smth great!',
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sherlock_searchform'),
        'access callback' => TRUE,
    );

    return $items;
}

function sherlock_searchform($form, &$form_state) {
  $form['#tree'] = TRUE;
  $form['#prefix'] = '<div id="sherlock-search-form">';
  $form['#suffix'] = '</div>';

  //Print out supported flea-markets. TODO: maybe this output better to do with theme function and template file?
  $formatted_list = array();

  $formatted_list[OLX_NAME] = OLX_NAME . ' [<a target="_blank" href="' . OLX_URL . '">' . t('Open this market\' website in new tab') . '</a>]';
  $formatted_list[BESPLATKA_NAME] = BESPLATKA_NAME . ' [<a target="_blank" href="' . BESPLATKA_URL . '">' . t('Open this market\' website in new tab') . '</a>]';
  $formatted_list[SKYLOTS_NAME] = SKYLOTS_NAME . ' [<a target="_blank" href="' . SKYLOTS_URL . '">' . t('Open this market\' website in new tab') . '</a>]';

  $form['resources_chooser'] = array(
    '#type' => 'checkboxes',
    '#options' => $formatted_list,
    '#title' => 'Choose flea-markets websites to search on',
  );

  $form['query_constructor_block'] = array(
    '#type' => 'fieldset',
    '#title' => '',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  //Don't try to combine next two IFs to one block, they need to be as they written!:
  //The first:
  if(!isset($form_state['user_added'])) {
    new_block($form_state);
  }

  //The second:
  if(isset($form_state['user_added'])) {
    foreach ($form_state['user_added'] as $key => $value) {
      $form['query_constructor_block'][$key] = $value;
    }
  }

  //By default, search performs only in headers, but some resources (OLX and Skylots, but not Besplatka) also supports
  //search in body. Technically, it adds specific suffix to URL.
  $form['dscr_chk'] = array(
    '#type' => 'checkbox',
    '#title' => 'Search not only in titles, but in descriptions too (if resource supports).',
  );

  $form['btn_addterm'] = array(
    '#type' => 'submit',
    '#value' => 'Add Term',
    '#name' => 'btn_addterm',
    '#submit' => array(
      'btn_addterm_handler',
    ),
    '#ajax' => array(
      'callback' => 'updatedform_return',
    ),
  );

  $form['btn_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#name' => 'btn_submit',
  );

  $form['btn_reset'] = array(
    '#type' => 'submit',
    '#value' => 'Reset Form',
    '#name' => 'btn_reset',
    '#submit' => array(
      'btn_reset_handler',
    ),
  );

  return $form;
}

function new_block(&$form_state) {
    $num_elements = isset($form_state['user_added']) ? count($form_state['user_added']) : 0;

    $form_state['user_added']['KEYWORD-'.$num_elements] = array(
        '#type' => 'fieldset',
        '#title' => 'KEYWORD-'.$num_elements,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
    );

    //This is nested block for variation values only
    $form_state['user_added']['KEYWORD-'.$num_elements]['VALUES'] = array(
        '#type' => 'fieldset',
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
    );

    $form_state['user_added']['KEYWORD-'.$num_elements]['VALUES'][0] = array(
        '#type' => 'textfield',
        '#required' => TRUE,
        '#title' => 'Variation '.$num_elements.'/'.'0',
    );

    $form_state['user_added']['KEYWORD-'.$num_elements]['btn_addvariation-'.$num_elements] = array(
        '#type' => 'submit',
        '#value' => 'Add Variation',
        '#name' => 'btn_addvariation-'.$num_elements,
        '#submit' => array(
            'btn_addvariation_handler',
        ),
        '#ajax' => array(
            'callback' => 'updatedform_return',
        ),
    );
}

function updatedform_return($form, $form_state) {
    $commands = array();
    $commands[] = ajax_command_replace('#sherlock-search-form', drupal_render($form));
    return array(
        '#type' => 'ajax',
        '#commands' => $commands,
    );
}

function btn_addterm_handler($form, &$form_state) {
    $pressed_btn_name = $form_state['triggering_element']['#name'];
    if ($pressed_btn_name != 'btn_addterm') {return;}

    new_block($form_state);

    $form_state['rebuild'] = TRUE;
}

function btn_addvariation_handler($form, &$form_state) {
    $pressed_btn_name = $form_state['triggering_element']['#name'];
    if (!((bool) strstr($pressed_btn_name, 'btn_addvariation'))) {return;}

    $btn_id = (int) explode('-', $pressed_btn_name)[1];
    $variationNo = isset($form_state['values']['query_constructor_block']['KEYWORD-'.$btn_id]['VALUES']) ? count($form_state['values']['query_constructor_block']['KEYWORD-'.$btn_id]['VALUES']) : 0;
    $newfield = array(
        '#type' => 'textfield',
        '#required' => TRUE,
        '#title' => 'Variation '.$btn_id.'/'.$variationNo,
    );

    array_push($form_state['user_added']['KEYWORD-'.$btn_id]['VALUES'], $newfield);

    $form_state['rebuild'] = TRUE;
}

//Consider to delete this functionality, because reset not works...
function btn_reset_handler($form, &$form_state) {
    $pressed_btn_name = $form_state['triggering_element']['#name'];
    if ($pressed_btn_name != 'btn_reset') {return;}

    unset ($form_state['user_added']);
    $form_state['rebuild'] = FALSE;
}

function sherlock_searchform_submit($form, &$form_state) {
  $pressed_btn_name = $form_state['triggering_element']['#name'];
  if ($pressed_btn_name != 'btn_submit') {return;}

  //Get flag which indicates - search title only or body too:
  $check_description_too = ((int) $form_state['values']['dscr_chk']) === 0 ? FALSE : TRUE;

  //Save all block values\variations to separate array
  $block_values = array();
  foreach ($form_state['values']['query_constructor_block'] as $key => $value) {
    if (startsWith($key, 'KEYWORD-')) {
      $block_values[] = $value['VALUES']; //Each value of $block_values is ARRAY with combinations of one given keyword (like sony, soni).
    }
  }

  //Now let's build list of all resources and their settings. Settings we can get as corresponding class static properties.
  $resources_list = array();
  $resources_list[OLX_NAME] = new OlxMarket();
  $resources_list[BESPLATKA_NAME] = new BesplatkaMarket();
  $resources_list[SKYLOTS_NAME] = new SkylotsMarket();

  //Array with all search URLs for all user-specified resources. This collection of URL we will use to cURL each of them at the next step.
  //All values are splitted by nested arrays. Keys to nested arrays are names of the resources.
  $constructed_urls_collection = array();

  foreach ($form_state['values']['resources_chooser'] as $key => $value) { //$key here is flea market name, like OLX, Besplatka, SkyLots
    if ($value !== 0) { //we take into consideration only checked resources, if checkbox unchecked its value == 0
      $prefix = $resources_list[$key]::getSearchURL();
      $glue = $resources_list[$key]::getWordsGlue();
      $suffix = $check_description_too ? $resources_list[$key]::getSuffixDescrChk() : '';
      $constructed_urls_collection[$key] = generate_all_possible_strings($block_values, $prefix, $glue, $suffix);
    }
  }

  sherlock_debug_msg($constructed_urls_collection);
}

function generate_all_possible_strings($block_values, $prefix, $glue, $suffix='') {
  $block_values_local = $block_values;

  //Trim values of input array for the case if user left space at left or at right:
  foreach ($block_values_local as &$value) {
    foreach ($value as &$subvalue) {
      $subvalue = trim($subvalue);
    }
  }
  unset ($value);
  unset ($subvalue);

  $variations_array = array();
  $variations_array = array_shift($block_values_local);
  while (!empty($block_values_local)) {
    $array_A = $variations_array;
    $variations_array = array();
    $array_B = array_shift($block_values_local);

    foreach ($array_A as $value_A) {
      foreach ($array_B as $value_B) {
        $variations_array[] = $value_A.$glue.$value_B;
      }
    }
  }

  //If spaces are present -> replace them with 'glue' symbol
  foreach ($variations_array as &$value) {
    $value = preg_replace('/\s+/', $glue, $value);
  }
  unset($value);

  //Make shure that all strings in array are unique:
  $variations_array = array_unique($variations_array);

  //Reset indexing to 0, 1, 2, 3, 4 ... , because if array_unique() deleted some values, we will have missing indexes:
  $variations_array = array_values($variations_array);

  //Add prefix (usually address of the site and search invokation part like https://www.olx.ua/list/q-) and suffix (if available for this website)
  foreach ($variations_array as &$value) {
    $value = $prefix.$value.$suffix;
  }
  unset($value);

  return $variations_array;
}

function sherlock_debug_msg($x) {
    drupal_set_message('<pre>'.print_r($x, true).'</pre>');
}

//Some routine functions copypasted from stackoverflow :)
function startsWith($haystack, $needle)
{
    $length = strlen($needle);
    return (substr($haystack, 0, $length) === $needle);
}

function endsWith($haystack, $needle)
{
    $length = strlen($needle);
    if ($length == 0) {
        return true;
    }

    return (substr($haystack, -$length) === $needle);
}
