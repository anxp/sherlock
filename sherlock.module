<?php

function sherlock_menu() {
    $items = array();
    $items['sherlock'] = array(
        'title' => 'Search Query Constructor',
        'type' => MENU_NORMAL_ITEM,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sherlock_searchform'),
        'access callback' => TRUE,
    );

    return $items;
}

function sherlock_searchform($form, &$form_state) {
    $form['#tree'] = TRUE;
    $form['#prefix'] = '<div id="sherlock-search-form">';
    $form['#suffix'] = '</div>';

  $resources_list = db_select('sherlock_resources', 'shr')
    ->fields('shr', array('display_name', 'base_url'))
    ->execute()
    ->fetchAllAssoc('display_name');

  sherlock_debug_msg($resources_list);

  $formatted_list = array();
  foreach ($resources_list as $key => $value) {
    $formatted_list[$key] = '<a target="_blank" href="' . $value->base_url . '">' . $value->display_name . '</a>';
  }

  $form['resources_chooser'] = array(
    '#type' => 'checkboxes',
    '#options' => $formatted_list,
    '#title' => 'Choose flea-markets websites to search on',
  );

  $form['query_constructor_block'] = array(
    '#type' => 'fieldset',
    '#title' => '',
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );

  if(!isset($form_state['user_added'])) {
    new_block($form_state);
  }

  if(isset($form_state['user_added'])) {
    foreach ($form_state['user_added'] as $key => $value) {
      $form['query_constructor_block'][$key] = $value;
    }
  }

  $form['btn_addterm'] = array(
    '#type' => 'submit',
    '#value' => 'Add Term',
    '#name' => 'btn_addterm',
    '#submit' => array(
      'btn_addterm_handler',
    ),
    '#ajax' => array(
      'callback' => 'updatedform_return',
    ),
  );

  $form['btn_submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#name' => 'btn_submit',
  );

  $form['btn_reset'] = array(
    '#type' => 'submit',
    '#value' => 'Reset Form',
    '#name' => 'btn_reset',
    '#submit' => array(
      'btn_reset_handler',
    ),
  );

  return $form;
}

function new_block(&$form_state) {
    $num_elements = isset($form_state['user_added']) ? count($form_state['user_added']) : 0;

    $form_state['user_added']['KEYWORD-'.$num_elements] = array(
        '#type' => 'fieldset',
        '#title' => 'KEYWORD-'.$num_elements,
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
    );

    //This is nested block for variation values only
    $form_state['user_added']['KEYWORD-'.$num_elements]['VALUES'] = array(
        '#type' => 'fieldset',
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
    );

    $form_state['user_added']['KEYWORD-'.$num_elements]['VALUES'][0] = array(
        '#type' => 'textfield',
        '#required' => TRUE,
        '#title' => 'Variation '.$num_elements.'/'.'0',
    );

    $form_state['user_added']['KEYWORD-'.$num_elements]['btn_addvariation-'.$num_elements] = array(
        '#type' => 'submit',
        '#value' => 'Add Variation',
        '#name' => 'btn_addvariation-'.$num_elements,
        '#submit' => array(
            'btn_addvariation_handler',
        ),
        '#ajax' => array(
            'callback' => 'updatedform_return',
        ),
    );
}

function updatedform_return($form, $form_state) {
    $commands = array();
    $commands[] = ajax_command_replace('#sherlock-search-form', drupal_render($form));
    return array(
        '#type' => 'ajax',
        '#commands' => $commands,
    );
}

function btn_addterm_handler($form, &$form_state) {
    $pressed_btn_name = $form_state['triggering_element']['#name'];
    if ($pressed_btn_name != 'btn_addterm') {return;}

    new_block($form_state);

    $form_state['rebuild'] = TRUE;
}

function btn_addvariation_handler($form, &$form_state) {
    $pressed_btn_name = $form_state['triggering_element']['#name'];
    if (!((bool) strstr($pressed_btn_name, 'btn_addvariation'))) {return;}

    $btn_id = (int) explode('-', $pressed_btn_name)[1];
    $variationNo = isset($form_state['values']['query_constructor_block']['KEYWORD-'.$btn_id]['VALUES']) ? count($form_state['values']['query_constructor_block']['KEYWORD-'.$btn_id]['VALUES']) : 0;
    $newfield = array(
        '#type' => 'textfield',
        '#required' => TRUE,
        '#title' => 'Variation '.$btn_id.'/'.$variationNo,
    );

    array_push($form_state['user_added']['KEYWORD-'.$btn_id]['VALUES'], $newfield);

    $form_state['rebuild'] = TRUE;
}

//Consider to delete this functionality, because reset not works...
function btn_reset_handler($form, &$form_state) {
    $pressed_btn_name = $form_state['triggering_element']['#name'];
    if ($pressed_btn_name != 'btn_reset') {return;}

    unset ($form_state['user_added']);
    $form_state['rebuild'] = FALSE;
}

function sherlock_searchform_submit($form, &$form_state) {
    $pressed_btn_name = $form_state['triggering_element']['#name'];
    if ($pressed_btn_name != 'btn_submit') {return;}

    //Save all block values\variations to separate array
    $block_values = array();
    foreach ($form_state['values']['query_constructor_block'] as $key => $value) {
        if (startsWith($key, 'KEYWORD-')) {
            $block_values[] = $value['VALUES'];
        }
    }

    $variations_array = array();
    $variations_array = array_shift($block_values);
    while (!empty($block_values)) {
        $array_A = $variations_array;
        $variations_array = array();
        $array_B = array_shift($block_values);

        foreach ($array_A as $value_A) {
            foreach ($array_B as $value_B) {
                $variations_array[] = $value_A.$value_B;
            }
        }
    }

    $form_state['values']['AAA'] = $variations_array;
    sherlock_debug_msg($form_state['user_added']);
}

function sherlock_debug_msg($x) {
    drupal_set_message('<pre>'.print_r($x, true).'</pre>');
}

//Some routine functions copypasted from stackoverflow :)
function startsWith($haystack, $needle)
{
    $length = strlen($needle);
    return (substr($haystack, 0, $length) === $needle);
}

function endsWith($haystack, $needle)
{
    $length = strlen($needle);
    if ($length == 0) {
        return true;
    }

    return (substr($haystack, -$length) === $needle);
}
